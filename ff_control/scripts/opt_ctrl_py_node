#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2023 Stanford Autonomous Systems Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import copy
import rclpy

import numpy as np
from casadi import *
import matplotlib.pyplot as plt

from ff_control.tri_thruster_ctrl import TrinaryThrusterController
from ff_msgs.msg import FreeFlyerState
from ff_msgs.msg import FreeFlyerStateStamped
from geometry_msgs.msg import PoseStamped


class ThrusterOptControlNode(TrinaryThrusterController):
    """
    Class for a CasADi-based optimization controller (based on linear_ctrl.py.

    state definition:   [x, y, theta, vx, vy, wz]
    control definition: [u0, u1, u2, u3] Trinary (-1, 0, 1) thruster representation of 8-thruster config

    Note: the current implementation is not thread safe
    """
    STATE_DIM = 6
    CONTROL_DIM = 4

    def __init__(self):
        super().__init__('thrust_opt_control_node')
        # State estimator
        self.declare_parameter("state_channel", "est/state")
        self._state_sub = self.create_subscription(
            FreeFlyerStateStamped,
            self.get_parameter("state_channel").get_parameter_value().string_value,
            self._state_callback,
            10,
        )
        self._state_ready = False
        self._state_stamped = FreeFlyerStateStamped()

        # Goal State command
        self.state_sp_sub = self.create_subscription(FreeFlyerStateStamped,
            'ctrl/state', self.state_setpoint_callback, 10)
        self.rviz_sp_sub = self.create_subscription(PoseStamped,
            '/goal_pose', self.rviz_setpoint_callback, 10)
        
        self.timer = self.create_timer(0.3, self.control_loop)
        self.state_desired = FreeFlyerStateStamped()

        # feedback gain params
        self.declare_parameter('horizon_secs', 3)

        # self.declare_parameter('gain_f', 2.0)
        # self.declare_parameter('gain_df', 10.0)
        # self.declare_parameter('gain_t', 0.2)
        # self.declare_parameter('gain_dt', 0.4)

    def send_control(self, state_des: T.Union[FreeFlyerState, np.ndarray]) -> None:
        """
        Send desirable target state for optimization-based control.

        :param state_des: desired state
        """
        if not self._state_ready:
            self.get_logger().warn("send_control ignored, state not yet ready")
            return

        # convert desired state to vector form
        if isinstance(state_des, FreeFlyerState):
            state_des = self.state2vec(state_des)

        self.set_tri_thrusters([1,1,1,1])

        # state_vector = self.state2vec(self.get_state())
        # state_delta = state_des - state_vector
        # # wrap angle delta to [-pi, pi]
        # state_delta[2] = (state_delta[2] + np.pi) % (2 * np.pi) - np.pi

        # u = K @ state_delta

        # wrench_world = Wrench2D()
        # wrench_world.fx = u[0]
        # wrench_world.fy = u[1]
        # wrench_world.tz = u[2]
        # self.set_world_wrench(wrench_world, state_vector[2])


    
    def get_state(self) -> T.Optional[FreeFlyerState]:
        """Get the current latest state."""
        if not self._state_ready:
            self.get_logger().error("get_state failed: state not yet ready")
            return None

        return self._state_stamped.state

    def state_ready_callback(self) -> None:
        # copy current position as goal position
        self.state_desired.header.stamp = self.get_clock().now().to_msg()
        self.state_desired.state = self.get_state()

    def state_setpoint_callback(self, msg: FreeFlyerStateStamped) -> None:
        self.state_desired = copy.deepcopy(msg)

    def rviz_setpoint_callback(self, msg: PoseStamped) -> None:
        self.state_desired.header.stamp = msg.header.stamp

        self.state_desired.state.pose.x = msg.pose.position.x
        self.state_desired.state.pose.y = msg.pose.position.y
        z = msg.pose.orientation.z
        w = msg.pose.orientation.w
        self.state_desired.state.pose.theta = np.arctan2(2 * w * z, w * w - z * z)

        self.state_desired.state.twist.vx = 0.
        self.state_desired.state.twist.vy = 0.
        self.state_desired.state.twist.wz = 0.
    
    def control_loop(self) -> None:
        # state not yet ready
        if not self.state_is_ready():
            return

        # build feedback gain matrix
        # gain_f = self.get_parameter('gain_f').get_parameter_value().double_value
        # gain_df = self.get_parameter('gain_df').get_parameter_value().double_value
        # gain_t = self.get_parameter('gain_t').get_parameter_value().double_value
        # gain_dt = self.get_parameter('gain_dt').get_parameter_value().double_value
        # K = np.array([[gain_f, 0, 0, gain_df, 0, 0],
        #                [0, gain_f, 0, 0, gain_df, 0],
        #                [0, 0, gain_t, 0, 0, gain_dt]])



        self.send_control(self.state_desired.state)

    def init_solver(self):
        T = self.get_parameter('horizon_secs').get_parameter_value().double_value
        N = int(T * self.freq)
        x0 = list(self.observer.get_state())

        # Declare model variables
        x = MX.sym('x', 6) # x,y,th,xdot,ydot,thdot
        u = MX.sym('u', 4) # 4 trinary thrusters (-1, 0, 1)
        
        body_Fx, body_Fy, M = self._map_to_force(u)

        th = x[2]
        world_Fx = body_Fx*cos(th) - body_Fy*sin(th)
        world_Fy = body_Fx*sin(th) + body_Fy*cos(th)
        
        # Model equations
        xdot = vertcat(x[3],
                       x[4],
                       x[5],
                       world_Fx / self.m,
                       world_Fy / self.m,
                       M / self.Ixx)

        k_th = 1
        k_pos = 2.5
        k_input = 3
        k_velo = 40
        # Stepwise Cost
        L =  k_th*(self.goal[2]-x[2])**2 + k_pos*(self.normsq(self.goal[0:2] - x[0:2])) + k_input*(self.normsq(u)) + k_velo*self.normsq(x[3:])

        # Fixed step Runge-Kutta 4 integrator
        M = 4 # RK4 steps per interval
        DT = T/N/M
        f = Function('f', [x, u], [xdot, L])    # Define function to take in current state/input and output xdot and cost
        X0 = MX.sym('X0', 6)                
        U = MX.sym('U', 4)
        X = X0
        Q = 0
        for j in range(M):
            k1, k1_q = f(X, U)
            k2, k2_q = f(X + DT/2 * k1, U)
            k3, k3_q = f(X + DT/2 * k2, U)
            k4, k4_q = f(X + DT * k3, U)
            X=X+DT/6*(k1 +2*k2 +2*k3 +k4)
            Q = Q + DT/6*(k1_q + 2*k2_q + 2*k3_q + k4_q)
        F = Function('F', [X0, U], [X, Q],['x0','p'],['xf','qf'])   # Take in initial state and current input and outputs final state and cost after one step (Runge-Kutta integrated)

        # Initial guess for u
        u_start = [DM([0.,0.,0.,0.])] * N

        # Get a feasible trajectory as an initial guess
        xk = DM(x0)
        x_start = [xk]
        for k in range(N):
            xk = F(x0=xk, p=u_start[k])['xf']
            x_start += [xk]

        # Start with an empty NLP
        w=[]
        w0 = []
        lbw = []
        ubw = []
        discrete = []
        J = 0
        g=[]
        lbg = []
        ubg = []

        # "Lift" initial conditions
        X0 = MX.sym('X0', 6)
        w += [X0]
        lbw += x0
        ubw += x0
        w0 += [x_start[0]]

        # Formulate the NLP
        Xk = X0
        for k in range(N):
            # New NLP variable for the control
            Uk = MX.sym('U_' + str(k), 4)
            w   += [Uk]
            lbw += self.lbu
            ubw += self.ubu
            w0  += [u_start[k]]

            # Integrate till the end of the interval
            Fk = F(x0=Xk, p=Uk)
            Xk_end = Fk['xf']
            J=J+Fk['qf']

            # New NLP variable for state at end of interval
            Xk = MX.sym('X_' + str(k+1), 6)
            w   += [Xk]
            lbw += self.lbx
            ubw += self.ubx
            w0  += [x_start[k+1]]
            # Add equality constraint
            g   += [Xk_end-Xk]
            lbg += [0, 0, 0, 0, 0, 0]
            ubg += [0, 0, 0, 0, 0, 0]

        J = J + 10*k_pos*(self.normsq(Xk_end[0:2]-self.goal[0:2])) + 10*k_th*(self.normsq(self.goal[2]-Xk_end[2])) + 10*k_velo*self.normsq(Xk_end[3:])

        # Concatenate decision variables and constraint terms
        w = vertcat(*w)
        g = vertcat(*g)

        # Create an NLP solver
        nlp_prob = {'f': J, 'x': w, 'g': g}
        cont_nlp_solver = nlpsol('nlp_solver', 'ipopt', nlp_prob); # Solve relaxed problem
        return w0, cont_nlp_solver, lbw, ubw, lbg, ubg

    @staticmethod
    def state2vec(state: FreeFlyerState) -> np.ndarray:
        """
        Convert state message to state vector.

        :param state: state message
        :return: state vector
        """
        return np.array(
            [
                state.pose.x,
                state.pose.y,
                state.pose.theta,
                state.twist.vx,
                state.twist.vy,
                state.twist.wz,
            ]
        )

    @staticmethod
    def vec2state(vec: np.ndarray) -> FreeFlyerState:
        """
        Convert state vector to state message.

        :param vec: state vector
        :return: state message
        """
        state = FreeFlyerState()
        state.pose.x = vec[0]
        state.pose.y = vec[1]
        state.pose.theta = vec[2]
        state.twist.vx = vec[3]
        state.twist.vy = vec[4]
        state.twist.wz = vec[5]

        return state

    def state_is_ready(self) -> bool:
        """
        Check if state is ready.

        :return: True if state is ready, False otherwise
        """
        return self._state_ready

    def _state_callback(self, msg: FreeFlyerStateStamped) -> None:
        self._state_stamped = copy.deepcopy(msg)

        if not self._state_ready:
            self._state_ready = True
            self.state_ready_callback()

def main(args=None):
    rclpy.init(args=args)
    opt_ctrl = ThrusterOptControlNode()
    rclpy.spin(opt_ctrl)
    rclpy.shutdown()


if __name__ == '__main__':
    main()
